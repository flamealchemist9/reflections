1) What happends when you initialize a repository? Why do you need to do it?

We use git init to initialize a repository, when we do it, git creates a .git folder in the folder we used git init. This folder is used to store the metadata that is uses to track our files. We need to do it because if we don't it will be just another directory and git will not track the files in the folder.

2) How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area is different from the working directory and the repository as it is virtual, it keeps track of the changes we wish to make virtually till we are ready to make the changes, ie, commit them. It keeps us from making mistakes like accidentally making commits and it also helps us commit selected files.

3) How can you use the staging area to make sure you have one commit per logical change?

We can use the staging area to make sure we have one commit per logical change by using git diff to compare our working directory with the most recent commit's image that is on the staging area as working directory doesn't have a commit ID,this also enables us to cross check our work incase we forget the changes we made. However, once we git add the files to the staging area using git diff will give different results, the added file wont be shown as a change since the staging area is updated. To compare the added file with the most recent commit we can run git diff --staged. Therefore, we can see that staging area helps us in making sure we have one commit per logical change.

4) What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches would be helpful when we want to take more than one approach with the same project but also pursue and keep track of them as well.

5) How do the diagrams help you visualize the branch structure?

Diagrams gave me a clear view about where I was, how I got there, how stay where I am, how to get where I want, how to keep my commits from getting lost and how to use branches efficienty. This is after I could visualize the branch structure.

6) What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches helps us to join the changes made in two separate branches of the same project, that is, we can say, for example, use two different branches to fix a bug and add a feature respectively and then merge the changes to have a feature-full and a bug-less code. We represent it in the diagram the way we do because it is how it's drawn. haha. No, because we have two branches joining at one commit, the merge branch commit. 
