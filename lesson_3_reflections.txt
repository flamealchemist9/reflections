1) When would you want to use a remote repository rather than keep all your work local?

I would want to use a remote repository rather than keep all my data local incase I want to collaborate with other people, or if I work from multiple systems.

2) Why would you always want to pull changes manually rather than having git automatically stay up-to-date with your remote repository?

I wouldn't want git to automatically keep me up-to-date as I would be using my local repository to make experimental changed and use the remote repository only when I want to sync code between devices or when I'm ready to a feature public

3) Describe the difference between forks, clones and branches. When do you use one instead of the other?

Branches are used to create working experimental changes from the main branch, they are created inside our repositories. Cloning is used to make a replica of a repository on our local machine from another place on the same machine or GitHub as well. Fork is when we clone a GitHub repository from another account into our account, This is a github only term and it's used to attribute the project the original creator and it's easier than to clone and add a remote and then push and then let others clone it again.

4) What is thet benefit of having a copy of the last known state of the remote stored locally?

The benefits are numerous, 
-> We can compare the last known state and our working directory to see our local progress. 
-> We can merge local work and remote successfully incase the remote directory on github has been modified with additional commits not present on our local machine.

5) How would you collaborate without using git or github? What would be easier, and what would be harder?

I would divide the work up into modules and have different people work on different modules. We'd then merge out work together. However, we'd document some guidelines and standards to follow so we don't end up with incompatible modules.
Without git, we'd have to save every version of the file that is significant. It would be a little difficult to work without git. It would be easier in a few ways like we won't have to keep merging changes as we'd work on logically different modules.

6) When would you want to make changes in a separate branch rather than directly in the master? What benefits does each approach have?

When collaborating with others it is often best to create new branches when we work on any new features or changes in our code, this stops conflicts from happening as they would if all the changes were made on the master branch. Ideally master branch should only be used to merge carefully verified changes in temporary branches as master is usually the production branch. However, when working locally or on a project that doesn't require a production branch it is easier to work directly on the master branch. 
Working directly on the master branch is easier but riskier where as creating new branches is time consuming but safer, especially in a collaborative environment.
